- name: Add chart repos.
  community.kubernetes.helm_repository:
    name: "{{ item.name }}"
    repo_url: "{{ item.repo_url }}"
  loop:
    - name: bitnami
      repo_url: https://charts.bitnami.com/bitnami
    - name: smallstep
      repo_url: https://smallstep.github.io/helm-charts

- name: Update Helm Repositories
  command: helm repo update

- name: Create CA PKI directory
  ansible.builtin.file:
    state: directory
    mode: 0600
    owner: root
    path: "{{ kubernetes_pki_directory }}/smallstep-ca"
  become: true

# Generate Root Key, CSR, and Certificate
- name: Generate a Root CA private key
  community.crypto.openssl_privatekey:
    path: "{{ kubernetes_pki_directory }}/smallstep-ca/root_ca.key"
    state: present
    type: ECC
    curve: "{{ stepca_root_ca_curve }}"
    cipher: auto
    passphrase: "{{ stepca_root_ca_password }}"
    return_content: true
    select_crypto_backend: cryptography
  register: smallstep_root_ca_key
  become: true

- name: Generate an OpenSSL Root Certificate Signing Request
  community.crypto.openssl_csr:
    path: "{{ kubernetes_pki_directory }}/smallstep-ca/root_ca.csr"
    privatekey_path: "{{ kubernetes_pki_directory }}/smallstep-ca/root_ca.key"
    privatekey_passphrase: "{{ stepca_root_ca_password }}"
    common_name: "{{ stepca_root_ca_common_name }}"
    organization_name: "{{ stepca_root_ca_organization_name }}"
    country_name: "{{ stepca_root_ca_country_name }}"
    locality_name: "{{ stepca_root_ca_locality_name }}"
    basic_constraints_critical: true
    basic_constraints:
      - CA:TRUE
      - pathlen:{{ stepca_root_ca_pathlen }}
    key_usage_critical: true
    key_usage:
      - keyCertSign
      - cRLSign
  become: true

- name: Generate a self-signed Root CA Certificate
  community.crypto.x509_certificate:
    path: "{{ kubernetes_pki_directory }}/smallstep-ca/root_ca.crt"
    csr_path: "{{ kubernetes_pki_directory }}/smallstep-ca/root_ca.csr"
    privatekey_path: "{{ kubernetes_pki_directory }}/smallstep-ca/root_ca.key"
    privatekey_passphrase: "{{ stepca_root_ca_password }}"
    return_content: true
    provider: selfsigned
    selfsigned_not_before: "{{ stepca_root_ca_not_before }}"
    selfsigned_not_after: "{{ stepca_root_ca_not_after }}"
  register: smallstep_root_ca_certificate
  become: true

# Generate Intermediate Key, CSR, and Certificate
- name: Generate an Intermediate CA private key.
  community.crypto.openssl_privatekey:
    path: "{{ kubernetes_pki_directory }}/smallstep-ca/intermediate_ca.key"
    state: present
    type: ECC
    curve: "{{ stepca_intermediate_ca_curve }}"
    cipher: auto
    passphrase: "{{ stepca_intermediate_ca_password }}"
    return_content: true
    select_crypto_backend: cryptography
  register: smallstep_intermediate_ca_key
  become: true

- name: Generate an OpenSSL Intermediate Certificate Signing Request
  community.crypto.openssl_csr:
    path: "{{ kubernetes_pki_directory }}/smallstep-ca/intermediate_ca.csr"
    privatekey_path: "{{ kubernetes_pki_directory }}/smallstep-ca/intermediate_ca.key"
    privatekey_passphrase: "{{ stepca_intermediate_ca_password }}"
    common_name: "{{ stepca_intermediate_ca_common_name }}"
    organization_name: "{{ stepca_intermediate_ca_organization_name }}"
    country_name: "{{ stepca_intermediate_ca_country_name }}"
    locality_name: "{{ stepca_intermediate_ca_locality_name }}"
    basic_constraints_critical: true
    basic_constraints:
      - CA:TRUE
      - pathlen:{{ stepca_intermediate_ca_pathlen }}
    key_usage_critical: true
    key_usage:
      - keyCertSign
      - cRLSign
  become: true

- name: Generate a Root Signed Intermediate CA Certificate
  community.crypto.x509_certificate:
    path: "{{ kubernetes_pki_directory }}/smallstep-ca/intermediate_ca.crt"
    csr_path: "{{ kubernetes_pki_directory }}/smallstep-ca/intermediate_ca.csr"
    ownca_path: "{{ kubernetes_pki_directory }}/smallstep-ca/root_ca.crt"
    ownca_privatekey_path: "{{ kubernetes_pki_directory }}/smallstep-ca/root_ca.key"
    ownca_privatekey_passphrase: "{{ stepca_root_ca_password }}"
    return_content: true
    provider: ownca
    ownca_not_before: "{{ stepca_intermediate_ca_not_before }}"
    ownca_not_after: "{{ stepca_intermediate_ca_not_after }}"
  register: smallstep_intermediate_ca_certificate
  become: true

# - name: delete keys
#   file:
#     state: absent
#     path: "{{ item }}"
#   loop:
#     - "{{ kubernetes_pki_directory }}/smallstep-ca/ssh_host_ca_ecdsa"
#     - "{{ kubernetes_pki_directory }}/smallstep-ca/ssh_user_ca_ecdsa"
#   become: true

# Generate Host SSH CA Key
- name: Generate Host SSH CA Key
  ansible.builtin.command: 
    argv:
      - ssh-keygen
      - -q
      - -t
      - ecdsa
      - -b
      - "{{ stepca_ssh_host_ca_ecdsa_bits }}"
      - -f
      - "{{ kubernetes_pki_directory }}/smallstep-ca/ssh_host_ca_ecdsa"
      - -C
      - ""
      - -N 
      - "{{ stepca_ssh_host_ca_password }}"
    creates: "{{ kubernetes_pki_directory }}/smallstep-ca/ssh_host_ca_ecdsa"
  become: true

- name: Slurp ssh host ca key
  ansible.builtin.slurp:
    src: "{{ kubernetes_pki_directory }}/smallstep-ca/ssh_host_ca_ecdsa"
  register: smallstep_ssh_host_ca_key
  become: true

- name: Slurp ssh host ca cert
  ansible.builtin.slurp:
    src: "{{ kubernetes_pki_directory }}/smallstep-ca/ssh_host_ca_ecdsa.pub"
  register: smallstep_ssh_host_ca_cert
  become: true

# Generate Client SSH CA Key
- name: Generate User SSH CA Key
  ansible.builtin.command: 
    argv:
      - ssh-keygen
      - -q
      - -t
      - ecdsa
      - -b
      - "{{ stepca_ssh_user_ca_ecdsa_bits }}"
      - -f
      - "{{ kubernetes_pki_directory }}/smallstep-ca/ssh_user_ca_ecdsa"
      - -C
      - ""
      - -N
      - "{{ stepca_ssh_user_ca_password }}"
    creates: "{{ kubernetes_pki_directory }}/smallstep-ca/ssh_user_ca_ecdsa"
  become: true

- name: Slurp ssh client ca key
  ansible.builtin.slurp:
    src: "{{ kubernetes_pki_directory }}/smallstep-ca/ssh_user_ca_ecdsa"
  register: smallstep_ssh_user_ca_key
  become: true

- name: Slurp ssh client ca cert
  ansible.builtin.slurp:
    src: "{{ kubernetes_pki_directory }}/smallstep-ca/ssh_user_ca_ecdsa.pub"
  register: smallstep_ssh_user_ca_cert
  become: true

- set_fact:
    rendered_step_certificates_secrets: "{{ lookup('template', '../templates/step-certificates-secrets.yml.j2') }}"
    rendered_step_certificates_certificates: "{{ lookup('template', '../templates/step-certificates-certificates.yml.j2') }}"
    rendered_step_certificates_ca_password: "{{ lookup('template', '../templates/step-certificates-ca-password.yml.j2') }}"
    rendered_step_certificates_config: "{{ lookup('template', '../templates/step-certificates-config.yml.j2') }}"

- name: Create Namespace
  community.kubernetes.k8s:
    api_version: v1
    kind: namespace
    name: "{{ stepca_k8s_namespace }}"
    state: present

- name: Create Step Certificate Config
  community.kubernetes.k8s:
    state: present
    definition: "{{ rendered_step_certificates_config }}"

- name: Create Step Certificates Root and Intermediate Certificates
  community.kubernetes.k8s:
    state: present
    definition: "{{ rendered_step_certificates_certificates }}"

- name: Create Step Certificates Root and Intermediate Private Keys
  community.kubernetes.k8s:
    state: present
    definition: "{{ rendered_step_certificates_secrets }}"

- name: Create Step Certificates Intermediate Password File
  community.kubernetes.k8s:
    state: present
    definition: "{{ rendered_step_certificates_ca_password }}"

- name: Deploy MariaDB
  community.kubernetes.helm:
    name: "{{ stepca_mariadb_helm_release_name }}"
    chart_ref: bitnami/mariadb
    chart_version: "{{ stepca_mariadb_helm_chart_version }}"
    release_namespace: "{{ stepca_k8s_namespace }}"
    create_namespace: false
    values:
      architecture: "{{ stepca_mariadb_architecture }}"
      auth:
        database: "{{ stepca_mariadb_database }}"
        username: "{{ stepca_mariadb_user_username }}"
        password: "{{ stepca_mariadb_user_password }}"
        replicationUser: "{{ stepca_mariadb_replication_username }}"
        replicationPassword: "{{ stepca_mariadb_replication_password }}"
        rootPassword: "{{ stepca_mariadb_root_password }}"
      primary:
        persistence:
          enabled: true
          storageClass: "{{ stepca_mariadb_storage_class }}"
          accessModes:
            - ReadWriteOnce
          size: "{{ stepca_mariadb_size }}"
        resources:
          limits:
            memory: "{{ stepca_mariadb_max_memory }}"
            cpu: "{{ stepca_mariadb_max_cpu }}"
          requests:
            memory: "{{ stepca_mariadb_min_memory }}"
            cpu: "{{ stepca_mariadb_min_cpu }}"
      secondary:
        persistence:
          enabled: true
          storageClass: "{{ stepca_mariadb_storage_class }}"
          accessModes:
            - ReadWriteOnce
          size: "{{ stepca_mariadb_size }}"
        resources:
          limits:
            memory: "{{ stepca_mariadb_max_memory }}"
            cpu: "{{ stepca_mariadb_max_cpu }}"
          requests:
            memory: "{{ stepca_mariadb_min_memory }}"
            cpu: "{{ stepca_mariadb_min_cpu }}"
      metrics:
        enabled: "{{ stepca_mariadb_monitoring_enabled }}"
        resources:
          limits:
            memory: "{{ stepca_mariadb_monitoring_max_memory }}"
            cpu: "{{ stepca_mariadb_monitoring_max_cpu }}"
          requests:
            memory: "{{ stepca_mariadb_monitoring_min_memory }}"
            cpu: "{{ stepca_mariadb_monitoring_min_cpu }}"
        serviceMonitor:
          enabled: "{{ stepca_mariadb_monitoring_enabled }}"

- name: Deploy Smallstep
  community.kubernetes.helm:
    name: "{{ stepca_stepca_helm_release_name }}"
    chart_ref: smallstep/step-certificates
    chart_version: "{{ stepca_stepca_helm_chart_version }}"
    release_namespace: "{{ stepca_k8s_namespace }}"
    create_namespace: false
    values:
      autocert:
        enabled: false
      bootstrap:
        configmaps: false
        enabled: false
        secrets: false
      service:
        type: NodePort
        port: 443
        targetPort: 9000
        nodePort: "{{ stepca_nodeport }}"

# - name: Configure NodePort
#   community.kubernetes.k8s:
#     state: present
#     definition:
#       apiVersion: v1
#       kind: Service
#       metadata:
#         annotations:
#           meta.helm.sh/release-name: "{{ stepca_stepca_helm_release_name }}"
#           meta.helm.sh/release-namespace: "{{ stepca_k8s_namespace }}"
#         labels:
#           app.kubernetes.io/instance: "{{ stepca_stepca_helm_release_name }}"
#           app.kubernetes.io/managed-by: Helm
#           app.kubernetes.io/name: step-certificates
#           app.kubernetes.io/version: "{{ stepca_stepca_helm_app_version }}"
#           helm.sh/chart: step-certificates-{{ stepca_stepca_helm_chart_version }}
#         name: "{{ stepca_stepca_helm_release_name }}-step-certificates"
#         namespace: "{{ stepca_k8s_namespace }}"
#       spec:
#         ports:
#         - name: https
#           nodePort: "{{ stepca_nodeport }}"
#           port: 443
#           protocol: TCP
#           targetPort: 9000
#         selector:
#           app.kubernetes.io/instance: "{{ stepca_stepca_helm_release_name }}"
#           app.kubernetes.io/name: step-certificates
#         type: NodePort

- name: delete step-ca pods
  block:
    - name: list smallstep certificates pods
      community.kubernetes.k8s_info:
        api_version: v1
        kind: Pod
        namespace: smallstep-ca
        label_selectors:
          - app.kubernetes.io/name=step-certificates
      register: step_ca_pods

    - name: delete smallstep certificates pods
      community.kubernetes.k8s:
        state: absent
        api_version: "{{ item.apiVersion }}"
        kind: "{{ item.kind }}"
        name: "{{ item.metadata.name }}"
        namespace: "{{ item.metadata.namespace }}"
      loop: "{{ step_ca_pods.resources }}"